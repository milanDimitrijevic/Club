// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using clubv1._3.Database;

#nullable disable

namespace Clubv1._3.Migrations
{
    [DbContext(typeof(ClubDbContext))]
    partial class ClubDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Clubv1._3.Domain.Entities.Actor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int?>("ActorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeceaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("SerieId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ActorId");

                    b.HasIndex("MovieId");

                    b.HasIndex("SerieId");

                    b.ToTable("Actors");
                });

            modelBuilder.Entity("Clubv1._3.Domain.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AvailableCds")
                        .HasColumnType("int");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<int?>("MovieId")
                        .HasColumnType("int");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RentingId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalCds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("RentingId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("Clubv1._3.Domain.Entities.Renting", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<DateTime>("DateOfRent")
                        .HasColumnType("datetime2");

                    b.Property<int>("RentedMovieId")
                        .HasColumnType("int");

                    b.Property<int>("RentedSerieId")
                        .HasColumnType("int");

                    b.Property<int?>("RentingId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RentedMovieId");

                    b.HasIndex("RentedSerieId");

                    b.HasIndex("RentingId");

                    b.HasIndex("UserId");

                    b.ToTable("Rents");
                });

            modelBuilder.Entity("Clubv1._3.Domain.Entities.Serie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<int>("AvailableCds")
                        .HasColumnType("int");

                    b.Property<int>("Episodes")
                        .HasColumnType("int");

                    b.Property<int>("Genre")
                        .HasColumnType("int");

                    b.Property<string>("Producer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ReleaseDate")
                        .HasColumnType("datetime2");

                    b.Property<int?>("RentingId")
                        .HasColumnType("int");

                    b.Property<int>("Seasons")
                        .HasColumnType("int");

                    b.Property<int?>("SerieId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("TotalCds")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RentingId");

                    b.HasIndex("SerieId");

                    b.ToTable("Series");
                });

            modelBuilder.Entity("Clubv1._3.Domain.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Clubv1._3.Domain.Entities.Actor", b =>
                {
                    b.HasOne("Clubv1._3.Domain.Entities.Actor", null)
                        .WithMany("Actors")
                        .HasForeignKey("ActorId");

                    b.HasOne("Clubv1._3.Domain.Entities.Movie", null)
                        .WithMany("Actors")
                        .HasForeignKey("MovieId");

                    b.HasOne("Clubv1._3.Domain.Entities.Serie", null)
                        .WithMany("Actors")
                        .HasForeignKey("SerieId");
                });

            modelBuilder.Entity("Clubv1._3.Domain.Entities.Movie", b =>
                {
                    b.HasOne("Clubv1._3.Domain.Entities.Movie", null)
                        .WithMany("Movies")
                        .HasForeignKey("MovieId");

                    b.HasOne("Clubv1._3.Domain.Entities.Renting", null)
                        .WithMany("Movies")
                        .HasForeignKey("RentingId");
                });

            modelBuilder.Entity("Clubv1._3.Domain.Entities.Renting", b =>
                {
                    b.HasOne("Clubv1._3.Domain.Entities.Movie", "RentedMovie")
                        .WithMany()
                        .HasForeignKey("RentedMovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clubv1._3.Domain.Entities.Serie", "RentedSerie")
                        .WithMany()
                        .HasForeignKey("RentedSerieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Clubv1._3.Domain.Entities.Renting", null)
                        .WithMany("Rents")
                        .HasForeignKey("RentingId");

                    b.HasOne("Clubv1._3.Domain.Entities.User", null)
                        .WithMany("Rented")
                        .HasForeignKey("UserId");

                    b.Navigation("RentedMovie");

                    b.Navigation("RentedSerie");
                });

            modelBuilder.Entity("Clubv1._3.Domain.Entities.Serie", b =>
                {
                    b.HasOne("Clubv1._3.Domain.Entities.Renting", null)
                        .WithMany("Series")
                        .HasForeignKey("RentingId");

                    b.HasOne("Clubv1._3.Domain.Entities.Serie", null)
                        .WithMany("Series")
                        .HasForeignKey("SerieId");
                });

            modelBuilder.Entity("Clubv1._3.Domain.Entities.User", b =>
                {
                    b.HasOne("Clubv1._3.Domain.Entities.User", null)
                        .WithMany("Users")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Clubv1._3.Domain.Entities.Actor", b =>
                {
                    b.Navigation("Actors");
                });

            modelBuilder.Entity("Clubv1._3.Domain.Entities.Movie", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Movies");
                });

            modelBuilder.Entity("Clubv1._3.Domain.Entities.Renting", b =>
                {
                    b.Navigation("Movies");

                    b.Navigation("Rents");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Clubv1._3.Domain.Entities.Serie", b =>
                {
                    b.Navigation("Actors");

                    b.Navigation("Series");
                });

            modelBuilder.Entity("Clubv1._3.Domain.Entities.User", b =>
                {
                    b.Navigation("Rented");

                    b.Navigation("Users");
                });
#pragma warning restore 612, 618
        }
    }
}
